from datamodel_parser.models.datamodel import Intro, File, Hdu, Header, Keyword, Data, Column, Location, Env
from os.path import join, exists
from os import environ

class Summary:

    def __init__(self, name = None, verbose = None):
        self.name = name
        self.verbose = verbose
        self.set_file()
        self.set_hdu_list()
        self.set_data()
        
        """self.set_yaml_dir()
        self.set_yaml_file()"""

    def set_data(self):
        self.data = {'general':{}, 'hdus':{}, 'hdu_keywords':{}}
        self.set_description_from_intro()
        self.set_generated_by_from_intro()
        if len(self.hdu_list) > 0: self.set_descriptions_from_hdu()
        
    def set_intro(self, heading_title = None):
        try: self.intro = Intro.query.filter(Intro.file_id==self.file_id).filter(Intro.heading_title == heading_title).one() if self.file_id and heading_title else None
        except Exception as e:
            self.intro = None
            print("Summary> Intro %r" % e)
        
    def set_description_from_intro(self):
        self.set_intro(heading_title = 'General Description')
        if self.intro is None: self.set_intro(heading_title = 'General description')
        self.data['general']['description'] = self.intro.description if self.intro is not None and self.intro.description not in ['', None] else "IPL1: Description"

    def set_generated_by_from_intro(self):
        self.set_intro(heading_title = 'Generated by Product')
        if self.intro is None: self.set_intro(heading_title = 'Written by products')
        if self.intro is None: self.set_intro(heading_title = 'Written by Products')
        self.data['general']['generated_by'] = self.intro.description if self.intro is not None and self.intro.description not in ['', None] else "Generated by SDSS Pipeline or Science Teams"

    def set_hdu_list(self):
        self.hdu_list = Hdu.query.filter(Hdu.file_id==self.file.id).order_by(Hdu.number).all() if self.file else None
        if len(self.hdu_list) == 0: print('Summary> HDUs not in database')

    def set_file(self):
        if self.name:
            try: self.file = File.query.filter(File.name.ilike('%s%%' % self.name)).one()
            except: self.file = None
        print("Summary> %r" % self.file)

    def set_yaml_dir(self):
        try:
            self.yaml_dir = join(environ['DATAMODEL_DIR'], 'datamodel', 'products', 'yaml')
            if self.verbose: print("Summary> Yaml %r" % self.yaml_dir )
        except Exception as e:
            self.yaml_dir = None
            print("Summary> Yaml %r" % e )

    def set_yaml_file(self):
        self.yaml_file = join(self.yaml_dir, '%s.yaml' % self.name) if self.name and self.yaml_dir else None
        if self.yaml_file and not exists(self.yaml_file):
            print("Summary> Nonexistent Path %r" % self.yaml_file )
        if self.verbose: print("Summary> Yaml File %r" % self.yaml_file )
