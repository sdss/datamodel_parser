from datamodel_parser.models.datamodel import Intro, File, Hdu, Header, Keyword, Data, Column
from os.path import join, exists
from os import environ
import yaml


class Content:

    def __init__(self, name = None, htmlname = None, verbose = False):
        self.name = name
        self.htmlname = htmlname
        self.verbose = verbose
        self.log = {'success':[], 'failed':[]}
        self.set_yaml_dir()
        self.set_yaml_file()
        self.set_cache_from_yaml_file()
        self.check_cache()
        if self.cache_format_as_expected:
            self.set_file_id()
            self.set_hdu_list()
            self.set_database_descriptions()
            self.check_database_loaded()
            if self.database_entries_loaded:
                self.set_yaml_description()
                self.set_yaml_generated_by()
                self.set_yaml_naming_convention()
                self.set_yaml_hdu_descriptions()
                self.write_cache_to_yaml_file()
                self.write_yaml_database_success_or_fail_specifics()
            else: self.append_to_log('Skipped since data not correctly loaded', 'failed')
        else: self.append_to_log('Skipped due to no cache loaded', 'failed')

    def set_yaml_dir(self):
        """Set Yaml dir"""
        try: self.yaml_dir = join(environ['DATAMODEL_DIR'], 'datamodel', 'products', 'yaml')
        except Exception as e:
            self.yaml_dir = None
            self.append_to_log('ERROR> Failed setting directory: %s'%e, 'failed')

    def set_yaml_file(self):
        """Set Yaml file"""
        self.yaml_file = join(self.yaml_dir, '%s.yaml' % self.name) if self.name and self.yaml_dir else None
        if self.yaml_file and exists(self.yaml_file): self.append_to_log('Found %s' % self.yaml_file, 'success')
        else: 
            self.append_to_log('ERROR> Cannot find yaml file %r' % self.yaml_file, 'failed')
            self.yaml_file = None
            
    def set_cache_from_yaml_file(self):
        """Retrieve data from Yaml file"""
        if self.yaml_file:
            with open(self.yaml_file, 'r') as file:
                try:
                    self.cache = yaml.safe_load(file)
                except yaml.YAMLError as e:
                    self.append_to_log('Yaml Failed to load cache: %s' %e, 'failed')
                    self.cache = None

    def check_cache(self):
        """Check Yaml load exists and meets expected format"""
        self.cache_format_as_expected = self.cache is not None and 'general' in self.cache and 'releases' in self.cache and len(self.cache['releases']) > 0
        if self.cache is None: self.append_to_log('FAIL> Yaml file is not loaded', 'failed')
        elif 'general' not in self.cache: self.append_to_log('FAIL> Yaml file format is incorrect as "general" is not a top level key', 'failed')
        elif 'releases' not in self.cache: self.append_to_log('FAIL> Yaml file format is incorrect as "releases" is not a top level key', 'failed')
        elif len(self.cache['releases']) == 0: self.append_to_log('FAIL> Yaml file lacks release data', 'failed')

    def set_file_id(self):
        """Set datamodel file identifier from database"""
        #select id from file where name ilike 'manga-rss%';
        try: self.file = File.query.filter(File.name.ilike('%s%%' % self.htmlname)).one() if self.htmlname else None
        except Exception as e:
            self.file = None
            self.append_to_log('Failed to load File: %s' %e, 'failed')
        self.file_id = self.file.id if self.file else None

    def set_hdu_list(self):
        """Set HDU list related to datamodel"""
        self.hdu_list = Hdu.query.filter(Hdu.file_id==self.file_id).order_by(Hdu.number).all() if self.file_id else None
        if self.hdu_list is None: self.append_to_log('HDUs not in database', 'failed')

    def set_database_descriptions(self):
        """Set overall, HDU, keyword, and column descriptions"""
        self.database_data = {'general':{}, 'hdus':{}, 'hdu_keywords':{}, 'hdu_columns':{}}
        self.set_description_from_intro()
        self.set_generated_by_from_intro()
        self.set_naming_convention_from_intro()
        self.set_descriptions_from_hdu()

    def set_description_from_intro(self):
        """Set general description from database"""
        self.set_intro_for_heading_title(heading_title = 'General Description')
        self.database_data['general']['description'] = self.intro.description if self.intro else None

    def set_intro_for_heading_title(self, heading_title = None):
        """Retrieve datamodel introduction descriptions"""
        try: self.intro = Intro.query.filter(Intro.file_id==self.file_id).filter(Intro.heading_title == heading_title).one() if self.file_id and heading_title else None
        except Exception as e:
            self.intro = None
            self.append_to_log('Failed to retrieve Intro: %s'%e, 'failed')
        
    def set_generated_by_from_intro(self):
        """Set generated by description from database"""
        self.set_intro_for_heading_title(heading_title = 'Generated by Product')
        self.database_data['general']['generated_by'] = self.intro.description if self.intro else None
        
    def set_naming_convention_from_intro(self):
        """Set naming convention description from database"""
        self.set_intro_for_heading_title(heading_title = 'Naming Convention')
        self.database_data['general']['naming_convention'] = self.intro.description if self.intro else None

    def set_descriptions_from_hdu(self):
        """Loop to retrieve all HDU, keyword, and column descriptions from database"""
        for self.hdu in self.hdu_list:
            self.set_hdu_description()
            self.set_header_from_hdu()
            if self.header: self.set_keywords_from_header()
            self.set_data_from_hdu()
            if self.data: self.set_columns_from_header()

    def set_hdu_description(self):
        """Retrieve HDU description from database"""
        self.database_data['hdus'][self.hdu.title.split(': ')[-1]] = self.hdu.description

    def set_header_from_hdu(self):
        """Retrieve header in database"""
        self.header = Header.query.filter(Header.hdu_id==self.hdu.id) if self.hdu else None
        self.header = self.header.one() if self.header is not None and self.header.count() else None

    def set_keywords_from_header(self):
        """Retrieve list of keywords and their descriptions from database"""
        self.keywords = Keyword.query.filter(Keyword.header_id==self.header.id).order_by(Keyword.position).all() if self.header else None
        self.database_data['hdu_keywords'][self.hdu.title.split(': ')[-1]] = {keyword.keyword:keyword.comment for keyword in self.keywords}

    def set_data_from_hdu(self):
        """Retrieve data related to columns from database"""
        self.data = Data.query.filter(Data.hdu_id==self.hdu.id) if self.hdu else None
        self.data = self.data.one() if self.data is not None and self.data.count() else None

    def set_columns_from_header(self):
        """Retrieve column descriptions"""
        self.columns = Column.query.filter(Column.data_id==self.data.id).order_by(Column.position).all() if self.data else None
        self.database_data['hdu_columns'][self.hdu.title.split(': ')[-1]] = {column.name:column.description for column in self.columns}

    def check_database_loaded(self):
        """Check overal and HDU related descriptions exists in database"""
        self.database_entries_loaded = self.database_data['general']['description'] is not None and self.database_data['general']['generated_by'] is not None and self.database_data['general']['naming_convention'] is not None and self.hdu_list is not None
        if self.database_data['general']['description'] is None or self.database_data['general']['generated_by'] is None or self.database_data['general']['naming_convention'] is None: self.append_to_log('FAIL> Database entry does not exist', 'failed')
        elif self.hdu_list is None: self.append_to_log('No HDU list retrieved by database', 'failed')

    def append_to_log(self, message, process):
        """Append a message to the log file and state if proccess is a success or failure"""
        self.log[process].append(message + r'\n')
        if self.verbose: print(message)

    def set_yaml_description(self):
        """Set Yaml general description from database"""
        self.append_to_log("General desciption| " + self.cache['general']['description'] + ' > ' + self.database_data['general']['description'], 'success')
        self.cache['general']['description'] = self.database_data['general']['description']

    def set_yaml_generated_by(self):
        """Set Yaml generated by description from database"""
        self.append_to_log("Generated by| " + self.cache['general']['generated_by'] + ' > ' + self.database_data['general']['generated_by'], 'success')
        self.cache['general']['generated_by'] = self.database_data['general']['generated_by']

    def set_yaml_naming_convention(self):
        """Set Yaml naming convention description from database"""
        self.append_to_log("naming convention| " + self.cache['general']['naming_convention'] + ' > ' + self.database_data['general']['naming_convention'], 'success')
        self.cache['general']['naming_convention'] = self.database_data['general']['naming_convention']

    def set_yaml_hdu_descriptions(self):
        """Set Yaml HDU, keyword, and columns descriptions from database"""
        for self.yaml_release in self.cache['releases'].keys():
            for self.yaml_hdu in self.cache['releases'][self.yaml_release]['hdus'].keys():
                self.hdu_title = self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['name']
                if self.hdu_title in self.database_data['hdu_keywords']:
                    self.set_yaml_hdu_description()
                    if 'header' in self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu].keys(): self.set_yaml_hdu_keywords()
                    if 'columns' in self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu].keys(): self.set_yaml_hdu_columns()
                else:
                    self.append_to_log('HDU: ' + self.hdu_title + 'not present in database', 'failed')

    def set_yaml_hdu_description(self):
        """Set Yaml HDU description from database"""
        if self.hdu_title in self.database_data['hdus']:
            self.append_to_log('HDU: ' + self.hdu_title + '| ' + self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['description'] + ' > ' + self.database_data['hdus'][self.hdu_title], 'success')
            self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['description'] = self.database_data['hdus'][self.hdu_title]
        else: self.append_to_log('HDU: ' + self.hdu_title + 'not present in database', 'failed')

    def set_yaml_hdu_keywords(self):
        """Set Yaml HDU keywords from database"""
        for header_index, keyword in enumerate(self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['header']):
            if keyword['key'] in self.database_data['hdu_keywords'][self.hdu_title]:
                self.append_to_log('HDU: ' + self.hdu_title + ', keyword:' + keyword['key'] + '| ' + str(self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['header'][header_index]['comment']) + ' > ' + str(self.database_data['hdu_keywords'][self.hdu_title][keyword['key']]), 'success')
                self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['header'][header_index]['comment'] = self.database_data['hdu_keywords'][self.hdu_title][keyword['key']]
            else: self.append_to_log('HDU: ' + self.hdu_title + ', keyword:' + keyword['key'] + 'not present in database', 'failed')

    def set_yaml_hdu_columns(self):
        """Set Yaml HDU columns from database"""
        hdu_title = self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['name']
        for column in self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['columns'].keys():
            if column in self.database_data['hdu_columns'][hdu_title]:
                self.append_to_log('HDU: ' + self.hdu_title + ', column:' + column + '| ' + str(self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['columns'][column]['description']) + ' > ' + str(self.database_data['hdu_columns'][hdu_title][column]), 'success')
                self.cache['releases'][self.yaml_release]['hdus'][self.yaml_hdu]['columns'][column]['description'] = self.database_data['hdu_columns'][hdu_title][column]
            else: self.append_to_log('HDU: ' + self.hdu_title + ', column:' + column + 'not present in database', 'failed')

    def write_cache_to_yaml_file(self):
        """Overwrite old Yaml file"""
        temp_file = '%s.temp' % self.yaml_file #We will eventually remove once we have this save working right
        if self.yaml_file and exists(self.yaml_file):
            '''with open(temp_file, 'w') as file:
                yaml.dump(self.cache, file, default_flow_style=False)'''
            with open(temp_file, 'w') as f: f.write(yaml.dump(self.cache, sort_keys=False))
            self.append_to_log('Updated %s' % self.yaml_file, 'success')
        else: 
            self.append_to_log('Failed to update %r' % self.yaml_file, 'failed')
            self.yaml_file = None

    def write_yaml_database_success_or_fail_specifics(self):
        """Write a database to Yaml sucess or failure log file"""
        test_file = '%s.database_to_yaml_log' % self.yaml_file
        with open(test_file, 'w') as f: f.write(yaml.dump(self.log, sort_keys=False))


        
        
